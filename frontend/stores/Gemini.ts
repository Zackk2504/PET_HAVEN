import {GoogleGenerativeAI} from '@google/generative-ai';
import {useServiceStore} from '~/stores/DichVuStores';
import {useVoucherStore} from '~/stores/VorchersStores';
import {computed, ref} from 'vue';

export const useAIStore = defineStore('ai', () => {
    const serviceStore = useServiceStore();
    const voucherStore = useVoucherStore();

    const apiKey = 'AIzaSyBwB5cDXuckYok3o75_O6X9KEzd8ezYJWs';

    const services = computed(() =>
        serviceStore.services.filter(service => service.trangthai && service.hien)
    );

    const vouchers = computed(() =>
        voucherStore.ListVoucher.filter(voucher => voucher.trangthai)
    );

    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({model: 'gemini-2.0-flash-exp'});

    const generationConfig = {
        temperature: 0.7,
        topK: 1,
        topP: 1,
        maxOutputTokens: 2048,
    };

    const getServiceInfo = () =>
        services.value.map(({id, ten, mota, gia}) => ({id, ten, mota, gia}));

    const getVoucherInfo = () =>
        vouchers.value.map(({id, phantramgiam, ngaybatdau, ngayketthuc, mota, trangthai}) =>
            ({id, phantramgiam, ngaybatdau, ngayketthuc, mota, trangthai}));
    const serviceInfo = getServiceInfo();
    const voucherInfo = getVoucherInfo();
    const context = `B·∫°n l√† nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng cho c·ª≠a h√†ng th√∫ c∆∞ng PetHaven. H√£y tu√¢n th·ªß nghi√™m ng·∫∑t c√°c quy t·∫Øc sau:

            1. Ch·ªâ tr·∫£ l·ªùi v·ªÅ c√°c d·ªãch v·ª• v√† ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i c√≥ trong danh s√°ch d∆∞·ªõi ƒë√¢y. 
            Kh√¥ng ƒë∆∞·ª£c t·∫°o ra ho·∫∑c ƒë·ªÅ c·∫≠p ƒë·∫øn b·∫•t k·ª≥ th√¥ng tin n√†o kh√¥ng c√≥ trong danh s√°ch n√†y.
            2. N·∫øu kh√°ch h·ªèi v·ªÅ d·ªãch v·ª• ho·∫∑c khuy·∫øn m√£i kh√¥ng c√≥ trong danh s√°ch, h√£y tr·∫£ l·ªùi r·∫±ng hi·ªán t·∫°i c·ª≠a h√†ng ch∆∞a c√≥ d·ªãch v·ª•/khuy·∫øn m√£i ƒë√≥.
            3. C·ªë g·∫Øng tr·∫£ l·ªùi c√°c c√¢u h·ªèi cho th√∫ c∆∞ng m·ªôt c√°ch h√†i h∆∞·ªõc v√† th√™m th·∫≠t nhi·ªÅu icon v·ªÅ ch√≥ v√† m√®o. 
            Ch√≥ üêï
                üê∂ üêï üêï‚Äçü¶∫ ü¶Æ üê© üêæ ü¶¥ üêï‚Äçü¶∫ üê© ü¶Æ
                üê∂ üêï üêï‚Äçü¶∫ ü¶¥ üêæ üê© ü¶Æ üêï üêæ ü¶¥
                üê∂ üêï üê© ü¶Æ üêæ üêï‚Äçü¶∫ ü¶¥ üê∂ üê© üêï‚Äçü¶∫

            M√®o üêà
                üê± üêà üêà‚Äç‚¨õ üêæ üê± üêà üêæ üê± üêà‚Äç‚¨õ üêæ
                üê± üêà üêæ üê± üêà‚Äç‚¨õ üêæ üê± üêà üêà‚Äç‚¨õ üêæ
                üê± üêà üêæ üê± üêà‚Äç‚¨õ üêæ üê± üêà üêæ üê±.
            4. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.
            5. Khi ƒë·ªÅ c·∫≠p ƒë·∫øn gi√° c·∫£ ho·∫∑c ph·∫ßn trƒÉm gi·∫£m gi√°, h√£y s·ª≠ d·ª•ng ch√≠nh x√°c s·ªë li·ªáu t·ª´ danh s√°ch, kh√¥ng l√†m tr√≤n ho·∫∑c thay ƒë·ªïi.
            
            D·ªãch v·ª• hi·ªán c√≥:
            ${JSON.stringify(serviceInfo, null, 2)}
            
            Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i:
            ${JSON.stringify(voucherInfo, null, 2)}
            
            H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng d·ª±a ch√≠nh x√°c tr√™n th√¥ng tin n√†y.`;

    const chatHistory = ref([
        {
            role: "user",
            parts: [{text: context}],
        },
        {
            role: "model",
            parts: [{text: "Xin ch√†o! T√¥i l√† nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng c·ªßa PetHaven üêæ. T√¥i r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n v·ªÅ c√°c d·ªãch v·ª• v√† ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i c·ªßa ch√∫ng t√¥i. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨, t√¥i s·∫Ω tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán v√† d·ªÖ th∆∞∆°ng nh·∫•t c√≥ th·ªÉ! üê∂üê±"}],
        },
    ]);


    const sendMessage = async (prompt) => {
        try {

            chatHistory.value.push({role: "user", parts: [{text: context + "\n\n" + prompt}]});

            const chatSession = model.startChat({
                generationConfig,
                history: chatHistory.value,
            });

            const result = await chatSession.sendMessage(prompt);
            const responseText = result.response.text();

            chatHistory.value.push({role: "model", parts: [{text: responseText}]});

            return responseText;
        } catch (error) {
            console.error("Error sending message to AI:", error);
            throw new Error("Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau nh√©! üôè");
        }
    };

    return {sendMessage, chatHistory};
});